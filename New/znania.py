
#print('') 
 # что то выводит текст там к примеру
# "+" плюс действует как оператор конкатенации, если операнды являются строками, в противном случае он действует как математический оператор сложения. В то время как запятая в функции print используется для разделения переменных: в случае со строками и + в print работают одинаково, но в основе своей они разные: + создаёт новый объект из операнда, в то время как запятая использует объекты и не создаёт новые:

# print('Delhi'+'is capital')

# print(2+6)

# var1='Hello'
# var2='!!'
# print(var1,var2)
# print(2,6)




#a = 1
# это переменная в которую можно что то положить какое то число или строку и она будет там храниться.

#input('текст')
# это фунция которая выводит текст для пользователя и просит его ввести  что нибудь и положит в переменную. считаеться строкой а не числом

#int() это фунция которая округляет до целого значения
# print(int(110.87)) 
# выйдет 110

#складывать мы может только либо числа либо строки в python, если сложить строки то они просто состыкуються между собой.

#type() функция которая дает узнать тип данных 

#str() функция которая превращает типы данных в строку. 
#СТР это строка 

#Типы данных 
#str строка 
#int() целое число 
#float()  число с запятой 
#это может быть типом данных или функцией которая приобразует тип данных переменных в дркгой тип данных.
#list по сути это список в котором храняться данные по очереди их добавления.
# в списке может храниться и тип данный 'str' к примеру x = [abc, bcd, cda] в списке x 3 элемента с типом данных 'str'
# так же  list называют "массивом"

# Типы данных

# переменная 
#   a = 


#  строка  str
# s2="hello"

# число целое  int
# a = 1

#  число с зяпятой float

# a = 1.111

#  список list
# l1=[1, 4, 5, 2, 456, 12]

#  кортежа
# t1=(15, 3, 5, 7, 9, 11, 42)

#  списка кортежей
# t2=[(1, 2), (11, 12), (0, 2), (3, 2)]

#  множества
# s1={1, 4, 3, 6, 2, 8, 11, 32}

#  словарь dict
# d1={2: 'red', 1: 'green', 3: 'blue'}

#функция range()
#в скобках функции можно указать число к примеру 10  функция выведет  такой вот диапазон от 0 до 10 (0, 10) но только первое и конечное число.
# от и до
# применять с циклом for i in range () где i это переменная.

#print(range(10))

#функция len() дает узнать длинн сочетаеться с range()

#Цикл
#For это цикл, внутри него можно создать переменную первая переменная должна быть новая , а вторая уже старая.  и далее укахать по какому массиву это переменнтая будет бежать.
#или итерироваться.
#можно итерироваться по типах данных  строка(str) диапазон  кортедж и список(list)
#for – счетный цикл, повторяется определенное количество раз;
# так же for может внутри самого себя в таком случае сначала будет выполняться более глубокий цикл или второй, затем снова первый.
# пример
#lst1 = ['1', '2', '3', '4', '5']
#lst2 = ['a', 'b', 'c', 'd', 'e']
#for i in lst1:
    #for j in lst2:
        #print(i + j)
# таким образом сначала будет взята 1 со всеми буквами затем 2 со всеми буквами и так далее.
# For может быть с условиями if elif else

# сейчас разберу каждое отдельно.

# if создает условия с переменными переводить как "если"  к примеру если одно то "команда" такая то.
# в if существует два параметра true и false  первое выполняеться если условие совпадает со значением и телофункции выполняеться.
# если значение не подходить это считаеться false то есть не истенно и функция не проигрываеться в таком случае вообще.

# else  позволяет ставить условие после if таким образом  если не выполняеться условие связанное с if то выполняеться условие else
# если выполняеться if то else игнорируеться и на облорот.
# так же переменную не нужно указывать  когда ставишь else
# по сути просто условие которе будет срабатывать если в if сработоло False тогда и подключитсья Else

# elif  это еще одна проверка на условие в нутри которой могут быть еще  и другие проверки
# если if  выводит false то срабатывает elif со свойе проверкой и если так же срабатывает false то далее идет тело else
#  elif  так же описываеться как и if обратить внимание.


# метод append() можно применить только к листам для того что бы добавить что то в его конец.
# append() добавляет в конец списка элемент, переданный ему в качестве аргумента. Как и все методы в Python, он вызывается через оператор . (точка).
# for i in range(N):
#     spisok.append(randint(1,99)) тут к переменной добавили метод append() после "spisok" идет точка которая показывает что дальше к переменной
#  будет что то в нашем случае добавленно.

#  >>> int(True)
#  1
#  >>> int(False)
#  0
#  Возможно и обратное. Можно преобразовать какое-либо значение к булевому типу:
#  >>> bool(3.4)
#  True
#  >>> bool(-150)
#  True
#  >>> bool(0)
#  False
#  >>> bool(' ')
#  True

# Чтобы получить True при использовании оператора and, необходимо, чтобы результаты обоих 
# простых выражений, которые связывает данный оператор, были истинными. Если хотя бы в 
# одном случае результатом будет False, то и все сложное выражение будет ложным. 

# Чтобы получить True при использовании оператора or, необходимо, чтобы результат хотя бы 
# одного простого выражения, входящего в состав сложного, был истинным. В случае оператора 
# or сложное выражение становится ложным лишь тогда, когда ложны оба составляющие его 
# простые выражения. Так же можно использовать оператор or с четырьмя переменными. Но логика сохраняеться две операнды с одной переменной и два других операнда с другой операнды. 
#  Так же потом из двух переменных сравниваються результаты и or возвращает true либо false. только сравнивая уже две переменные а не два операнда.


# #В языке Python есть еще унарный логический оператор not, то есть отрицание. Он превращает 
# правду в ложь, а ложь в правду. Унарный он потому, что применяется к одному выражению, 
# стоящему после него, а не справа и слева от него как в случае бинарных and и or

# format
# этим методом можно выводить больше символов после зяпятой
# print(float("%.99999f" % smash_factor))

#find() вводишь что хочешь найти в "" метод выдет индекс положения в строке начиная считать с 0 , найдет первое то что нужно найти и все.

# repalce() этот метод, заменяет что то на что то, первое значение в скопках старое второе новое третье кол-во раз.

# bb = "+ ++ + +"
# nb=bb.replace(" ","+")
# print(nb)

# горчие клавишы 
#с помощью alt можно двигать строчки вверх или низ
# Ctrl + / — закомментировать или раскомментировать строк
# Shift + Tab сместить в право  
# Shift + alt + стрелка  дублировать код.
# shift + стрелка вверх выделять что то.
#  если нажать shift и срелку в бок то можно выделить слово и если выделить слово и нажать на ковычяки он их заковычит.
# Cntrl +  F2 если выделить слово и нажать комбинацию можно редактировать каждое это слово
# shift +  tab  ортаная табуляция
# """ тройныйе квычки в начале  файла и в конце комментриуют весь код файла.

#git команды#
# git add .
# git add nam_file
# git status
# git commit -m "text comit 50 simbols"
# git log
# git push
# git clone # клонирует полностью рипазиторий в путь который ты указал.


# пошаговая инструкция для загрузки в риапазиторий изменений# 
# cd education (где education это имя репозитория. папки в которой находиться файл)
# git add  .  (пробел точка, обязательно)
# git commit -am " " (должен быть текст в кавычках )
# git push


# команды для CMD #
# cd следующая директория
# cd.. " название директори" что бы вернуться на одну дир назад.
# pwd путь до директории в которой ты сейчас 
 

#Dickt#

# my_dickt = {"1": "один","2":"два"}

# keys_dict = my_dickt.keys()
# values_dict = my_dickt.values()

# print(keys_dict,values_dict)


# print(my_dict.values())


#библетека string#
# отдельно хочу выделить: string.printable - все символы 
# string.capwords(s) - каждая строка с заглавной буквы + удаление пробелов.
